{"version":3,"sources":["logo.svg","firebase.js","firebaseActions.js","MusicDataComponent.js","MusicDataComponentMaster.js","AlbumComponent.js","WoodComponent.js","App.js","serviceWorker.js","index.js","music-reducer.js","wood-reducer.js","album-reducer.js","lyrics-reducer.js","current-wood-index.js","current-album-index.js","lyrics-master-reducer.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","useStyles","MusicDataComponent","props","languageList","columLyrics","title","type","field","editComponent","value","onChange","options","name","selectedOption","style","float","color","paddingLeft","icons","Check","DetailPanel","ChevronRight","Export","SaveAlt","Filter","FilterList","FirstPage","LastPage","NextPage","PreviousPage","ChevronLeft","Search","ThirdStateCheck","Remove","Delete","DeleteOutline","Edit","Add","Clear","columns","data","musicSource","lyricsmaster","map","x","Object","assign","editable","onRowAdd","newData","Promise","resolve","reject","setTimeout","lyricsValue","lyricsText","lyricsDescription","albumName","split","length","alert","oncreate","onRowUpdate","oldData","onupdate","onRowDelete","splice","tableData","id","ondelete","onSelectionChange","WoodComponent","connect","state","console","log","albums","woods","lyrics","currentWoodIndex","currentAlbumIndex","initialLoad","dispatch","objectToCreate","collectionName","typeToAct","currentState","wood","collection","add","then","response","catch","error","doc","set","createDocument","objectToUpdate","oldObject","isreUpdate","args","update","excep","updateDocument","onget","get","snapshot","docs","tempDoc","getDocument","onselect","selectedIndex","selectedData","selectedDocument","selectDocument","objectToDelete","updatedObject","delete","success","deleteDocument","useEffect","className","Boolean","window","location","hostname","match","allreducer","combineReducers","action","forEach","push","i","albumDate","seconds","Date","updatedIndex","findIndex","element","allStoreEnhancer","compose","applyMiddleware","thunk","store","createStore","getState","ReactDOM","render","aRandomprops","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.14b9b979.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCEm7vA-msgcnmh0zmGMQRpwygZs5QI_-c\",\n  authDomain: \"musicbox-b9c5e.firebaseapp.com\",\n  databaseURL: \"https://musicbox-b9c5e.firebaseio.com\",\n  projectId: \"musicbox-b9c5e\",\n  storageBucket: \"musicbox-b9c5e.appspot.com\",\n  messagingSenderId: \"165520597198\",\n  appId: \"1:165520597198:web:e0022ea222fa058752709f\"\n};\n\nfirebase.initializeApp(firebaseConfig)\n\nexport default firebase;\n","import firebase  from \"./firebase\";\n\n\nexport const GET_ALL ='GET_ALL'\nexport const GET_ALBUM ='GET_ALBUM'\nexport const GET_WOOD = 'GET_WOOD'\nexport const GET_LYRICS = 'GET_LYRICS'\nexport const REQUEST_DOCUMENT = 'REQUEST_DOCUMENT'\nexport const RECEIVE_DOCUMENT = 'RECEIVE_DOCUMENT'\nexport const UPDATE_ALBUM = 'UPDATE_ALBUM'\nexport const UPDATE_WOOD = 'UPDATE_WOOD'\nexport const UPDATE_LYRICS_MASTER = 'UPDATE_LYRICS_MASTER'\nexport const CREATE_ALBUM = 'CREATE_ALBUM'\nexport const CREATE_WOOD = 'CREATE_WOOD'\nexport const CREATE_LYRICS = 'CREATE_LYRICS'\nexport const SELECT_WOOD = 'SELECT_WOOD'\nexport const SELECT_ALBUM = 'SELECT_ALBUM'\nexport const DELETE_WOOD = 'DELETE_WOOD'\nexport const INSERT_LYRICS = 'INSERT_LYRICS'\nexport const GET_MUSIC_LIST = 'GET_MUSIC_LIST'\nexport const UPDATE_LYRICS = 'UPDATE_LYRICS'\n\nconst db = firebase.firestore();\n\n\nexport const createDocument = (objectToCreate,collectionName,typeToAct,currentState)=>\n{\n  return function (dispatch)\n {\n   var errorOccured = false;\n   var wood ={};\n   if(typeToAct == \"CREATE_WOOD\")\n   {\n     wood = objectToCreate;\n\n   }\n   else {\n\n     wood = currentState.woods[currentState.currentWoodIndex];\n\n   }\n   if(typeToAct != \"INSERT_LYRICS\")\n   {\n   db.collection('Users').add(wood).then(()=>{\n   dispatch( receiveDocument({type:typeToAct,response:objectToCreate}));\n\n}).catch((error)=>{\n  errorOccured = true;\n\n})\n\n   }\n\n   else \n   {\n    db.collection('MusicList').doc().set(objectToCreate).then(()=>{\n      dispatch( receiveDocument({type:typeToAct,response:objectToCreate}));\n   \n   }).catch((error)=>{\n     errorOccured = true;\n   \n   })\n\n\n   }\n\n\n\n\n\n }\n\n}\n\nexport const createLyric = (objectToCreate) =>\n{\n\n  return function(dispatch)\n  {\n    db.collection('Lyrics').set(objectToCreate).then(()=>{\n    dispatch(receiveDocument({type:\"INSERT_LYRIC\", response:objectToCreate}))\n\n    })\n  }\n}\n\nexport const selectDocument = (selectedIndex,typeToAct,selectedDocument)=>\n{\n\n  return function (dispatch)\n {\n   dispatch( receiveDocument({type:typeToAct,response:{selectedDocument,selectedIndex}}))\n\n }\n\n}\n\nexport const deleteDocument = (...args)=>\n{\n\n  return function (dispatch)\n  {\n    \n   db.collection(args[1]).doc(args[3].id?args[3].id:args[0].id).delete().then((success)=>{\n  \n      dispatch( receiveDocument({type:args[2],response:args[3]}));\n  \n    }).catch((excep)=>{\n  \n  \n    })\n  \n  }\n\n\n}\n\nexport const updateDocument = (...args)=>\n{\n  //debugger\nreturn function (dispatch)\n{\n  \n db.collection(args[1]).doc(args[3].id?args[3].id:args[0].id).update(args[0]).then(()=> {\n    dispatch( receiveDocument({type:args[2],response:args[0]}));\n  }).catch((excep)=>{\n\n  })\n\n}\n}\n\n\n\n\nexport const getDocument = (collectionName,typeToAct)=>\n{\nvar responseData = [];\n return function (dispatch)\n{\n db.collection(collectionName).get().then((snapshot)=>{\n   const data = snapshot.docs.map(\n     //debugger;\n     doc => \n     {\n       let tempDoc = {};\n       tempDoc.id = doc.id; \n      \n       Object.assign(tempDoc,doc.data())\n       return tempDoc;\n      }\n     \n     );\n   console.log(data);\n   dispatch( receiveDocument({type:typeToAct,response:data}))\n}).catch((excep)=>{\n   alert(\"error occured\");\n\n});\n\n\n}\n\n}\n\nfunction receiveDocument(json) {\nreturn json;\n}\n","import React, { Component,ListView,Text } from 'react';\nimport MaterialTable from 'material-table';\nimport DatePicker from \"react-datepicker\";\nimport ImageUploader from \"react-images-upload\";\nimport Dropdown from 'react-dropdown';\n\nimport Search from '@material-ui/icons/Search'\nimport ViewColumn from '@material-ui/icons/ViewColumn'\nimport SaveAlt from '@material-ui/icons/SaveAlt'\nimport ChevronLeft from '@material-ui/icons/ChevronLeft'\nimport ChevronRight from '@material-ui/icons/ChevronRight'\nimport FirstPage from '@material-ui/icons/FirstPage'\nimport LastPage from '@material-ui/icons/LastPage'\nimport Add from '@material-ui/icons/Add'\nimport Check from '@material-ui/icons/Check'\nimport FilterList from '@material-ui/icons/FilterList'\nimport Remove from '@material-ui/icons/Remove'\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport Clear from '@material-ui/icons/Clear';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Avatar from '@material-ui/core/Avatar';\nimport {GET_LYRICS,UPDATE_LYRICS,CREATE_LYRICS,UPDATE_WOOD} from './firebaseActions'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function MusicDataComponent(props) {\n const classes = useStyles();\n const columLyrics = [\n\t  { title: 'Name',  type: 'text', field:'albumName' },\n      { title: 'Lyric Description', type: 'text', field:'lyricsDescription' },\n      { title: 'Lyric Text', type: 'text', field:'lyricsText' },\n      { title: 'Lyric Value', type: 'text', field:'lyricsValue' },\n      { title: 'Speed',  type:'numeric', field:'lyricSpeed' },\n    { title: 'Video/Audio',  type:'text', field:'lyricImageURI' }\n\n     ]\n  const formStyle = {\n  float:'left',\n  color: 'blue',\n  width:'60%',\n  paddingLeft:'20px'\n  }\n  const inputStyle = {\n\n   width : '100%',\n   marginBottom: '20px',\n   height: '20px'\n\n  }\n\n  const options = [\n    'Hollywood', 'Bollywood', 'Nollywood'\n  ];\n  const defaultOption = options[0];\n\n\n\n\n  return (\n    <div style={formStyle}>\n    <h1>{props.musicSource.woods[props.musicSource.currentWoodIndex]?props.musicSource.woods[props.musicSource.currentWoodIndex].name:\"Music List\" }</h1>\n    <MaterialTable\n      title={props.musicSource.woods[props.musicSource.currentWoodIndex]?props.musicSource.woods[props.musicSource.currentWoodIndex].name+\"'s music list\":\"Music List\" }\n      icons={{\n                 Check: Check,\n                 DetailPanel: ChevronRight,\n                 Export: SaveAlt,\n                 Filter: FilterList,\n                 FirstPage: FirstPage,\n                 LastPage: LastPage,\n                 NextPage: ChevronRight,\n                 PreviousPage: ChevronLeft,\n                 Search: Search,\n                 ThirdStateCheck: Remove,\n                 Delete: DeleteOutline,\n                 Edit:Edit,\n                 Add:Add,\n                 Clear:Clear\n               }}\n\n      columns={columLyrics}\n      data={props.musicSource.lyrics.map(x =>Object.assign({}, x))}\n      editable={{\n        onRowAdd: (newData) =>\n          new Promise((resolve,reject) => {\n            setTimeout(() => {\n\n              if(!newData.lyricsValue)\n              {\n                alert('Lyric value should not be empty')\n                reject()\n                return\n              }\n              if(!newData.lyricsText)\n              {\n                alert('Lyric text should not be empty')\n                reject()\n                return\n              }\n\n              if(!newData.lyricsDescription)\n              {\n                alert('Lyric descrypton should not be empty')\n                reject()\n                return\n              }\n\n              if(!newData.albumName)\n              {\n                alert('Lyric name should not be empty')\n                reject()\n                return\n              }\n              if(newData.lyricsValue.split(\" \").length != newData.lyricsText.split(\" \").length)\n              {\n                alert('Lyric value and text spaces should be same')\n                reject()\n                return\n\n              }\n\n\n              if(props.musicSource.albums.length<=0)\n              {\n                props.musicSource.albums.push({lyrics:[]})\n               // props.musicSource.albums.push({lyrics:[]})\n\n              }\n\n              if(props.musicSource.woods[props.musicSource.currentWoodIndex].albums.length<=0)\n              {\n                props.musicSource.woods[props.musicSource.currentWoodIndex].albums.push({lyrics:[]})\n\n              }\n             \n              //props.musicSource.albums[props.musicSource.currentAlbumIndex].lyrics.push(newData)\n              props.musicSource.woods[props.musicSource.currentWoodIndex].albums[props.musicSource.currentAlbumIndex].lyrics.push(newData)\n              props.musicSource.oncreate(newData,'Lyrics',CREATE_LYRICS,props.musicSource)\n              resolve();\n            //  props.woodSource.push(newData);\n            }, 600);\n          }),\n        onRowUpdate: (newData, oldData) =>\n          new Promise((resolve,reject) => {\n\n            if(!newData.lyricsValue)\n            {\n              alert('Lyric value should not be empty')\n              reject()\n              return\n            }\n            if(!newData.lyricsText)\n            {\n              alert('Lyric text should not be empty')\n              reject()\n              return\n            }\n\n            if(!newData.lyricsDescription)\n            {\n              alert('Lyric descrypton should not be empty')\n              reject()\n              return\n            }\n\n            if(!newData.albumName)\n            {\n              alert('Lyric name should not be empty')\n              reject()\n              return\n            }\n            if(newData.lyricsValue.split(\" \").length != newData.lyricsText.split(\" \").length)\n            {\n              alert('Lyric value and text spaces should be same')\n              reject()\n              return\n\n            }\n\n           props.musicSource.woods[props.musicSource.currentWoodIndex]\n           .albums[props.musicSource.currentAlbumIndex]\n           .lyrics[oldData.tableData.id] = newData\n\n          // props.musicSource.onudpate(props.musicSource.woods,'Lyrics',CREATE_LYRICS,props.musicSource)\n\n\n         //   console.log(newData)\n          //  console.log(oldData)\n            setTimeout(() => {\n              resolve();\n              props.musicSource.onupdate(props.musicSource.woods[props.musicSource.currentWoodIndex],'Woods',UPDATE_LYRICS, props.musicSource.woods[props.musicSource.currentWoodIndex]\n              .albums[props.musicSource.currentAlbumIndex].lyrics)\n\n            }, 600);\n          }),\n        onRowDelete: (oldData) =>\n          new Promise((resolve) => {\n            props.musicSource.woods[props.musicSource.currentWoodIndex]\n            .albums[props.musicSource.currentAlbumIndex]\n            .lyrics.splice(oldData.tableData.id,1)\n\n            setTimeout(() => {\n              resolve();\n              props.musicSource.onupdate(props.musicSource.woods[props.musicSource.currentWoodIndex],'Woods',UPDATE_LYRICS, props.musicSource.woods[props.musicSource.currentWoodIndex]\n              .albums[props.musicSource.currentAlbumIndex].lyrics)\n\n            }, 600);\n          }),\n        onSelectionChange : (oldData) =>\n            new Promise((resolve) => {\n              setTimeout(() => {\n                resolve();\n\n              }, 600);\n            })\n      }}\n    />\n\n</div>  );\n}\n","import React, { Component, ListView, Text } from 'react';\nimport MaterialTable from 'material-table';\nimport DatePicker from \"react-datepicker\";\nimport ImageUploader from \"react-images-upload\";\nimport Dropdown from 'react-dropdown';\n\nimport Search from '@material-ui/icons/Search'\nimport ViewColumn from '@material-ui/icons/ViewColumn'\nimport SaveAlt from '@material-ui/icons/SaveAlt'\nimport ChevronLeft from '@material-ui/icons/ChevronLeft'\nimport ChevronRight from '@material-ui/icons/ChevronRight'\nimport FirstPage from '@material-ui/icons/FirstPage'\nimport LastPage from '@material-ui/icons/LastPage'\nimport Add from '@material-ui/icons/Add'\nimport Check from '@material-ui/icons/Check'\nimport FilterList from '@material-ui/icons/FilterList'\nimport Remove from '@material-ui/icons/Remove'\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport Clear from '@material-ui/icons/Clear';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Avatar from '@material-ui/core/Avatar';\nimport { GET_LYRICS, CREATE_LYRICS, UPDATE_WOOD, INSERT_LYRICS, GET_MUSIC_LIST, UPDATE_LYRICS_MASTER } from './firebaseActions'\nimport Select from \"react-select\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function MusicDataComponent(props) {\n  const classes = useStyles();\n  const languageList = [\n    { \"value\": \"en\", \"label\": \"English\" },\n    { \"value\": \"hi\", \"label\": \"Hindi\" },\n    { \"value\": \"ta\", \"label\": \"Tamil\" },\n    { \"value\": \"te\", \"label\": \"Telugu\" },\n    { \"value\": \"ml\", \"label\": \"Malayalam\" },\n    { \"value\": \"ar\", \"label\": \"Arabic\" }\n  ]\n\n  const columLyrics = [\n    { title: 'Name', type: 'text', field: 'albumName' },\n    { title: 'Lyric Description', type: 'text', field: 'lyricsDescription' },\n    { title: 'Lyric Text', type: 'text', field: 'lyricsText' },\n    { title: 'Lyric Value', type: 'text', field: 'lyricsValue' },\n    { title: 'Speed', type: 'numeric', field: 'lyricSpeed' },\n    { title: 'Video/Audio', type: 'text', field: 'lyricImageURI' },\n    {\n      title: \"Choose a Language\",\n      field: \"language\",\n      editComponent: ({ value, onChange }) => (\n        <Select\n          options={languageList}\n          name=\"language list\"\n          onChange={(selectedOption) => onChange(selectedOption.value)}\n          value={value ? value.value : value}\n        />\n      )\n    }\n\n  ]\n  const formStyle = {\n    float: 'left',\n    color: 'blue',\n    width: '95%',\n    paddingLeft: '20px'\n  }\n  const inputStyle = {\n\n    width: '100%',\n    marginBottom: '20px',\n    height: '20px'\n\n  }\n\n  const options = [\n    'Hollywood', 'Bollywood', 'Nollywood'\n  ];\n  const defaultOption = options[0];\n\n\n\n  return (\n    <div style={formStyle}>\n      <h1>Music Lists</h1>\n      <MaterialTable\n        title=\"Music Lists\"\n        icons={{\n          Check: Check,\n          DetailPanel: ChevronRight,\n          Export: SaveAlt,\n          Filter: FilterList,\n          FirstPage: FirstPage,\n          LastPage: LastPage,\n          NextPage: ChevronRight,\n          PreviousPage: ChevronLeft,\n          Search: Search,\n          ThirdStateCheck: Remove,\n          Delete: DeleteOutline,\n          Edit: Edit,\n          Add: Add,\n          Clear: Clear\n        }}\n\n        columns={columLyrics}\n        data={props.musicSource.lyricsmaster.map(x => Object.assign({}, x))}\n        editable={{\n          onRowAdd: (newData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n\n                if (!newData.lyricsValue) {\n                  alert('Lyric value should not be empty')\n                  reject()\n                  return\n                }\n                if (!newData.lyricsText) {\n                  alert('Lyric text should not be empty')\n                  reject()\n                  return\n                }\n\n                if (!newData.lyricsDescription) {\n                  alert('Lyric descrypton should not be empty')\n                  reject()\n                  return\n                }\n\n                if (!newData.albumName) {\n                  alert('Lyric name should not be empty')\n                  reject()\n                  return\n                }\n                if (newData.lyricsValue.split(\" \").length != newData.lyricsText.split(\" \").length) {\n                  alert('Lyric value and text spaces should be same')\n                  reject()\n                  return\n\n                }\n\n\n                //  props.musicSource.lyricsmaster.push(newData)  \n                props.musicSource.oncreate(newData, 'Lyrics', INSERT_LYRICS, props.musicSource)\n                resolve();\n                //  props.woodSource.push(newData);\n              }, 600);\n            }),\n          onRowUpdate: (newData, oldData) =>\n            new Promise((resolve, reject) => {\n\n              if (!newData.lyricsValue) {\n                alert('Lyric value should not be empty')\n                reject()\n                return\n              }\n              if (!newData.lyricsText) {\n                alert('Lyric text should not be empty')\n                reject()\n                return\n              }\n\n              if (!newData.lyricsDescription) {\n                alert('Lyric descrypton should not be empty')\n                reject()\n                return\n              }\n\n              if (!newData.albumName) {\n                alert('Lyric name should not be empty')\n                reject()\n                return\n              }\n              if (newData.lyricsValue.split(\" \").length != newData.lyricsText.split(\" \").length) {\n                alert('Lyric value and text spaces should be same')\n                reject()\n                return\n\n              }\n\n\n              setTimeout(() => {\n                resolve();\n                props.musicSource.onupdate(newData, 'MusicList', UPDATE_LYRICS_MASTER, oldData)\n\n              }, 600);\n\n\n            }),\n          onRowDelete: (oldData) =>\n            new Promise((resolve) => {\n\n\n              // setTimeout(() => {\n              //   resolve();\n              //   props.musicSource.onupdate(props.musicSource.lyricsmaster,'Woods',UPDATE_LYRICS, props.musicSource.lyricsmaster)\n\n              // }, 600);\n\n              props.musicSource.lyricsmaster.splice(oldData.tableData.id, 1)\n\n\n              setTimeout(() => {\n                resolve();\n\n                props.musicSource.ondelete(oldData, 'MusicList', GET_MUSIC_LIST, props.musicSource.lyricsmaster)\n\n              }, 600);\n            }),\n          onSelectionChange: (oldData) =>\n            new Promise((resolve) => {\n              setTimeout(() => {\n                resolve();\n\n              }, 600);\n            })\n        }}\n      />\n\n    </div>);\n}\n","import DatePicker from \"react-datepicker\";\nimport ImageUploader from \"react-images-upload\";\nimport Dropdown from 'react-dropdown';\nimport React, { Component  } from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'react-dropdown/style.css';\nimport MaterialTable from 'material-table';\n\n\nimport Search from '@material-ui/icons/Search'\nimport ViewColumn from '@material-ui/icons/ViewColumn'\nimport SaveAlt from '@material-ui/icons/SaveAlt'\nimport ChevronLeft from '@material-ui/icons/ChevronLeft'\nimport ChevronRight from '@material-ui/icons/ChevronRight'\nimport FirstPage from '@material-ui/icons/FirstPage'\nimport LastPage from '@material-ui/icons/LastPage'\nimport Add from '@material-ui/icons/Add'\nimport Check from '@material-ui/icons/Check'\nimport FilterList from '@material-ui/icons/FilterList'\nimport Remove from '@material-ui/icons/Remove'\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport Clear from '@material-ui/icons/Clear'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Avatar from '@material-ui/core/Avatar';\nimport {GET_ALBUM,UPDATE_ALBUM,CREATE_ALBUM,SELECT_ALBUM} from './firebaseActions'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nfunction AlbumComponent(props)\n{\n   const classes = useStyles();\n  const options = [\n    'Hollywood', 'Bollywood', 'Nollywood'\n  ];\n\n  const columAlbums = [\n  \t  { title: 'Name',  type: 'text', field:'albumName' },\n\n        { title: 'album Description', type: 'text', field:'albumDescription' },\n        { title: 'album Date',  type: 'date', field:'albumDate' },\n  \t  { title: 'album Image',  type:'text', field:'albumImageURI' }\n\n       ]\n  const defaultOption = options[0];\n  const formStyle = {\n\n  color: 'blue',\n  width:'30%',\n  paddingLeft:'20px',\n  height:'100px',\n  display:'none'\n  \n  }\n  const inputStyle = {\n\n   width : '100%',\n   marginBottom: '20px',\n   height: '20px'\n\n  }\n\n\nfunction handleSubmit(data)\n{\n\n\n}\n\nfunction handleChange(data)\n{\n\n\n}\nfunction handleRowClick(event, rowData)  {\n\n  props.albumSource.onselect(rowData.tableData.id,SELECT_ALBUM,rowData.lyrics)\n\n\n}\n\nfunction _onSelect(data)\n{\n\n\n}\n\nreturn (\n\n  <div style={formStyle}>\n  <h1>{props.albumSource.woods[props.albumSource.currentWoodIndex]?props.albumSource.woods[props.albumSource.currentWoodIndex].woodName:\"Album Name\" }</h1>\n  <MaterialTable\n    title={props.albumSource.woods[props.albumSource.currentWoodIndex]?props.albumSource.woods[props.albumSource.currentWoodIndex].woodName:\"Album Name\" }\n    icons={{\n               Check: Check,\n               DetailPanel: ChevronRight,\n               Export: SaveAlt,\n               Filter: FilterList,\n               FirstPage: FirstPage,\n               LastPage: LastPage,\n               NextPage: ChevronRight,\n               PreviousPage: ChevronLeft,\n               Search: Search,\n               ThirdStateCheck: Remove,\n               Delete: DeleteOutline,\n               Edit:Edit,\n               Add:Add,\n               Clear:Clear\n             }}\n\n    columns={columAlbums}\n    data={props.albumSource.albums.map(x =>Object.assign({}, x))}\n    onRowClick={handleRowClick}\n    editable={{\n      onRowAdd: (newData) =>\n        new Promise((resolve) => {\n          setTimeout(() => {\n            resolve();\n            newData.lyrics = []\n            props.albumSource.woods[props.albumSource.currentWoodIndex].albums.push(newData)\n            props.albumSource.oncreate(newData,'Albums',CREATE_ALBUM,props.albumSource)\n          //  props.woodSource.push(newData);\n          }, 600);\n        }),\n      onRowUpdate: (newData, oldData) =>\n        new Promise((resolve) => {\n          setTimeout(() => {\n            resolve();\n\n            props.albumSource.woods[props.albumSource.currentWoodIndex].albums[oldData.tableData.id] = newData\n            props.albumSource.onupdate(props.albumSource.woods[props.albumSource.currentWoodIndex],'Woods',UPDATE_ALBUM,props.albumSource.woods[props.albumSource.currentWoodIndex].albums)  \n\n\n          }, 600);\n        }),\n      onRowDelete: (oldData) =>\n        new Promise((resolve) => {\n          setTimeout(() => {\n            resolve();\n            props.albumSource.woods[props.albumSource.currentWoodIndex].albums.splice(oldData.tableData.id,1)\n            props.albumSource.onupdate(props.albumSource.woods[props.albumSource.currentWoodIndex],'Woods',UPDATE_ALBUM,props.albumSource.woods[props.albumSource.currentWoodIndex].albums)\n\n          }, 600);\n        }),\n      onSelectionChange : (oldData) =>\n          new Promise((resolve) => {\n            setTimeout(() => {\n              resolve();\n\n            }, 600);\n          })\n    }}\n  />\n        </div>\n      );\n\n}\n\nexport default AlbumComponent;\n","import DatePicker from \"react-datepicker\";\nimport ImageUploader from \"react-images-upload\";\nimport Dropdown from 'react-dropdown';\nimport React, { Component,ListView,Text,useState, useEffect } from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport MaterialTable from 'material-table';\n\nimport Search from '@material-ui/icons/Search'\nimport ViewColumn from '@material-ui/icons/ViewColumn'\nimport SaveAlt from '@material-ui/icons/SaveAlt'\nimport ChevronLeft from '@material-ui/icons/ChevronLeft'\nimport ChevronRight from '@material-ui/icons/ChevronRight'\nimport FirstPage from '@material-ui/icons/FirstPage'\nimport LastPage from '@material-ui/icons/LastPage'\nimport Add from '@material-ui/icons/Add'\nimport Check from '@material-ui/icons/Check'\nimport FilterList from '@material-ui/icons/FilterList'\nimport Remove from '@material-ui/icons/Remove'\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport Clear from '@material-ui/icons/Clear';\n\nimport { AddBox, ArrowDownward } from \"@material-ui/icons\";\n\n\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Avatar from '@material-ui/core/Avatar';\nimport {GET_WOOD,UPDATE_WOOD,CREATE_WOOD,SELECT_WOOD,DELETE_WOOD,UPDATE_LYRICS,SELECT_ALBUM} from './firebaseActions'\n//import React, { useState, useEffect } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\n\nfunction WoodComponent(props)\n{\n   const classes = useStyles();\n  const options = [\n    'Hollywood', 'Bollywood', 'Nollywood'\n  ];\n  const columWoods = [\n\t  { title: 'Student name',  type: 'text', field:'name' },\n      { title: 'Country',  type:'text', field:'countryCode' },\n      { title: 'Student Descrption', type: 'text', field:'userDescription' },\n      { title: 'Student Image',  type: 'text', field:'woodImageURI' }\n\n     ]\n     useEffect(()=>{\n\n         //console.log(props)\n          console.log('for test from effect'+props)\n          if(props.woodSource.woods.length>0)\n            props.woodSource.onselect(0,SELECT_ALBUM,props.woodSource.woods[0].albums.length>0?props.woodSource.woods[0].albums[0].lyrics:[])\n\n\n       //  props.type = GET_WOOD\n       //  props.onget('Woods',GET_WOOD)\n\n\n     },[props.woodSource.woods])\n  const defaultOption = options[0];\n  //const [state, setState] = React.useState({})\n//  const woodSource = props.woodSource.woods;\n//  const woods = props.woodSource.woods;\n  const _posts = props.woodSource.woods || []\n  const formStyle = {\n  float:'left',\n  color: 'blue',\n  width:'30%',\n  paddingLeft:'20px',\n  maxHeight: \"50px\"\n  }\n  const inputStyle = {\n\n   width : '100%',\n   marginBottom: '20px',\n   height: '20px'\n\n  }\n\n\nfunction handleSubmit(data)\n{\n\n\n}\n\nfunction handleChange(data)\n{\n\n\n}\n\nfunction handleRowClick(event, rowData)  {\n\n  props.woodSource.onselect(rowData.tableData.id,SELECT_WOOD,rowData.albums)\n  props.woodSource.onselect(0,SELECT_ALBUM,rowData.albums.length>0?rowData.albums[0].lyrics:[])\n  debugger\n\n}\n\nfunction _onSelect(data)\n{\n\n\n}\n\nreturn (\n\n  <div style={formStyle}>\n  <h1>Student List</h1>\n      <MaterialTable\n        title=\"Students\"\n        onRowClick={handleRowClick}\n        icons={{\n                   Check: Check,\n                   DetailPanel: ChevronRight,\n                   Export: SaveAlt,\n                   Filter: FilterList,\n                   FirstPage: FirstPage,\n                   LastPage: LastPage,\n                   NextPage: ChevronRight,\n                   PreviousPage: ChevronLeft,\n                   Search: Search,\n                   ThirdStateCheck: Remove,\n                   Delete: DeleteOutline,\n                   Edit:Edit,\n                   Add:Add,\n                   Clear:AddBox\n                 }}\n\n        columns={columWoods}\n        data={_posts.map(x =>Object.assign({}, x))}\n        options={{\n             search: true\n\n             }}\n\n        editable={{\n         \n            onRowCLick:(selectedData)=>{\n                debugger;\n            },\n          onRowUpdate: (newData, oldData) =>\n            new Promise((resolve) => {\n              setTimeout(() => {\n                resolve();\n\n                props.woodSource.onupdate(newData,'Woods',UPDATE_WOOD,oldData)\n\n\n              }, 600);\n            }),\n          onRowDelete: (oldData) =>\n            new Promise((resolve) => {\n              setTimeout(() => {\n                resolve();\n                props.woodSource.onupdate(oldData,'Woods',DELETE_WOOD,oldData,true) \n              }, 600);\n            }),\n          onSelectionChange : (oldData) =>\n              new Promise((resolve) => {\n                setTimeout(() => {\n                  resolve();\n\n                }, 600);\n              }),\n        }}\n      />\n        </div>\n      );\n\n}\n\nexport default WoodComponent;\n","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MusicDataComponent from './MusicDataComponent'\nimport MusicDataComponentMaster from './MusicDataComponentMaster'\nimport AlbumComponent from './AlbumComponent'\nimport WoodComponent from './WoodComponent'\nimport {GET_WOOD,GET_ALL,createDocument,updateDocument,getDocument,selectDocument,deleteDocument} from './firebaseActions'\nimport {connect} from 'react-redux';\n//import React, { useState, useEffect } from 'react';\n\nfunction App(props) {\n\n\n  useEffect(() => {\n  //we can use it if ir requires in future\n  //props.onget('Users','GET_WOOD');\n  props.onget('MusicList', 'GET_MUSIC_LIST')\n},[props.initialLoad]);\n\n  return (\n    <div className=\"App\">\n        {/* <WoodComponent woodSource={props}/>\n        <MusicDataComponent musicSource={props}/>\n        <AlbumComponent albumSource={props}/> */}\n        <MusicDataComponentMaster musicSource={props}/>\n\n  </div>\n  );\n}\nconst mapstatetoprops=(state,props)=>{\n\nconsole.log('state params'+state);\n\nreturn {\ntype : state.type,\nalbums:state.albums,\nwoods:state.woods,\nlyrics:state.lyrics,\ncurrentWoodIndex:state.currentWoodIndex,\ncurrentAlbumIndex:state.currentAlbumIndex,\nlyricsmaster:state.lyricsmaster,\ninitialLoad:true\n//currentWoodTitle:state.woods.length>0?state.woods[state.currentWoodIndex]:\"none\"\n\n}\n\n}\n\nconst mappropstoactions =(dispatch,props)=>{\nreturn {\noncreate: (objectToCreate,collectionName,typeToAct,woods)=>dispatch(createDocument(objectToCreate,collectionName,typeToAct,woods)),\nonupdate: (objectToUpdate,collectionName,typeToAct,oldObject,isreUpdate)=>dispatch(updateDocument(objectToUpdate,collectionName,typeToAct,oldObject,isreUpdate)),\nonget: (collectionName,typeToAct)=>dispatch(getDocument(collectionName,typeToAct)),\nonselect:(selectedIndex,typeToAct,selectedData)=>dispatch(selectDocument(selectedIndex,typeToAct,selectedData)),\nondelete: (objectToDelete,collectionName,typeToAct,updatedObject)=>dispatch(deleteDocument(objectToDelete,collectionName,typeToAct,updatedObject))\n}\n}\n\nexport default connect(mapstatetoprops,mappropstoactions)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport thunk from 'redux-thunk';\nimport {applyMiddleware,compose,combineReducers,createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport React, { useState, useEffect } from 'react';\nimport woods from './wood-reducer'\nimport lyrics from './lyrics-reducer'\nimport lyricsmaster from './lyrics-master-reducer'\nimport albums from './album-reducer'\nimport type from './music-reducer'\nimport currentAlbumIndex from './current-album-index'\nimport currentWoodIndex from './current-wood-index'\n\nconst parentStyle = {\n width : '100%'\n\n}\n\n\nconst allreducer = combineReducers(\n{\n  type,\n  woods,\n  albums,\n  lyrics,\n  currentWoodIndex,\n  currentAlbumIndex,\n  lyricsmaster\n\n})\n\nconst allStoreEnhancer = compose(\napplyMiddleware(thunk)\n//window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\n\n\n\nconst store = createStore(allreducer,\nallStoreEnhancer\n);\n\n\nconsole.log(store.getState())\nReactDOM.render(<Provider store={store}><App aRandomprops='check' /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { GET_ALL,GET_ALBUM,GET_WOOD,GET_LYRICS,REQUEST_DOCUMENT,RECEIVE_DOCUMENT ,UPDATE_ALBUM,UPDATE_WOOD,UPDATE_LYRICS,CREATE_ALBUM,CREATE_WOOD,CREATE_LYRICS} from './firebaseActions'\n\nexport default function type(state=GET_ALL,action)\n{\n\nswitch(action.type)\n{\n  case GET_LYRICS:\n   return GET_LYRICS;\n  case UPDATE_LYRICS:\n  //action.lyric\n   return UPDATE_LYRICS;\n  case CREATE_LYRICS:\n   return CREATE_LYRICS;\n  default:\n  return state;\n\n\n}\n\n}\n","import {GET_WOOD,UPDATE_WOOD,CREATE_WOOD,DELETE_WOOD} from './firebaseActions'\nimport { act } from 'react-dom/test-utils';\n\nexport default function woods(state=[],action)\n{\n\nswitch(action.type)\n{\n  case GET_WOOD:\n  {\n\n    if(action.response)\n    {\n       state = action.response\n       return Object.assign([],state)\n\n    }\n    return state;\n\n }\n  case UPDATE_WOOD:\n    {\n      if(action.response)\n      state.forEach((...args)=>{ \n        \n      if(args[0].id == action.oldObject.id)\n      {\n          state[args[1]]= action.response\n          \n\n      }\n      \n      });\n\n\n\n      return Object.assign([],state)\n\n    }\n  // return musiccomponents.woods.filter(wood=>wood.isUpdateRequired == true);\n  case CREATE_WOOD:\n  {\n    if(action.response)\n    {\n       state.push(action.response)\n       return Object.assign([],state)\n\n     }\n\n    return [];\n  }\n\n  case DELETE_WOOD:\n\n  {\n    if(action.response)\n    {\n      state.forEach((...args)=>{ \n        \n        if(args[0].name == action.oldObject.name)\n        {\n            state.splice(args[1],1)\n            \n  \n        }\n        \n        });\n        return Object.assign([],state)\n\n    }\n\n    return []\n\n  }\n\n\n  // return musiccomponents.woods.filter(wood=>wood.isSync == false);\n  default:\n   return state;\n\n\n}\n\n}\n","import {GET_ALBUM,UPDATE_ALBUM,CREATE_ALBUM,SELECT_WOOD} from './firebaseActions'\n\nexport default function albums(state=[],action)\n{\n\nswitch(action.type)\n{\n  case GET_ALBUM:\n   return [];\n  case UPDATE_ALBUM:\n      {\n        state = action.oldObject\n    \n        return Object.assign([],state)\n    \n      }\n \n  // return musiccomponents.albums.filter(album=>album.isUpdateRequired == true);\n  case CREATE_ALBUM:\n  state.push(action.response)\n\n  return Object.assign([],state)\n\n  // return musiccomponents.albums.filter(album=>album.isSync == false);\n  case SELECT_WOOD:\n   state = action.response.selectedDocument\n   for(var i=0;i<state.length;i++)\n   {\n     if(state[i].albumDate)\n      if(state[i].albumDate.seconds)\n      state[i].albumDate = new Date(state[i].albumDate.seconds*1000)\n\n   }\n   return Object.assign([],state)\n\n  default:\n   return state;\n\n\n}\n\n}\n","import {GET_LYRICS,UPDATE_LYRICS_MASTER,CREATE_LYRICS,SELECT_ALBUM} from './firebaseActions'\n\nexport default function lyrics(state=[],action)\n{\n\nswitch(action.type)\n{\n  case GET_LYRICS:\n  return action.response?action.response:[];\n  case UPDATE_LYRICS_MASTER:\n  //action.lyric\n  {\n    state = action.oldObject\n\n    return Object.assign([],state)\n\n  }\n  case CREATE_LYRICS:\n  if(action.response)\n  {\n     state.push(action.response)\n     return Object.assign([],state)\n\n   }\n\n  return Object.assign([],state)\n   case SELECT_ALBUM:\n    state = action.response.selectedDocument\n    return Object.assign([],state)\n\n  default:\n  return state;\n\n\n}\n\n}\n","import { SELECT_WOOD} from './firebaseActions'\nexport default function currentWoodIndex(state=0,action)\n{\n\nswitch(action.type)\n{\n  case SELECT_WOOD:\n   state = action.response.selectedIndex\n   return state\n\n  default:\n   return state;\n\n\n}\n\n}\n","import { SELECT_ALBUM} from './firebaseActions'\nexport default function currentAlbumIndex(state=0,action)\n{\n\nswitch(action.type)\n{\n  case SELECT_ALBUM:\n   state = action.response.selectedIndex\n   return state\n\n  default:\n   return state;\n\n\n}\n\n}\n","import {GET_LYRICS,UPDATE_LYRICS_MASTER,INSERT_LYRICS,SELECT_ALBUM,GET_MUSIC_LIST} from './firebaseActions'\n\nexport default function lyricsmaster(state=[],action)\n{\n\nswitch(action.type)\n{\n  \n  case INSERT_LYRICS:\n  if(action.response)\n  {\n     state.push(action.response)\n     return Object.assign([],state)\n\n   }\n\n  return Object.assign([],state)\n   \n  case GET_MUSIC_LIST:\n    if(action.response)\n    {\n       state = action.response\n       return Object.assign([],state)\n\n    }\n    return state;\n\n  case UPDATE_LYRICS_MASTER:\n    if(action.response)\n    {\n       let updatedIndex = state.findIndex((element) => element.id == action.response.id )\n       state[updatedIndex] = action.response\n       return Object.assign([],state)\n\n    }\n    return state;  \n  \n  default:\n  return state;\n\n\n}\n\n}\n"],"sourceRoot":""}